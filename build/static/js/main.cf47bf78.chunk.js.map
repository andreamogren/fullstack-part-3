{"version":3,"sources":["services/persons.js","components/Person.js","components/ContactForm.js","components/Notification.js","components/Filter.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","delete","Person","props","name","number","onClick","ContactForm","changeName","changeNumber","clickHandler","value","onChange","type","Notification","message","className","Filter","searchTerm","App","useState","persons","setPersons","filteredPersons","setFilteredPersons","newName","setNewName","newNumber","setNewNumber","successMessage","setSuccessMessage","useEffect","personService","initialPersons","event","filtered","filter","person","toUpperCase","indexOf","target","filterEntries","preventDefault","doubleName","upperCaseNewName","map","upperCasePerson","undefined","personObject","setTimeout","createPerson","alert","addPerson","key","previousElementSibling","window","confirm","innerHTML","updatedPersons","removeNumber","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf47bf78.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, deletePerson}","import React from 'react'\n\nconst Person = (props) => {\n    return(\n        <>\n        <p id={props.id}>{props.name} {props.number}</p>\n        <button onClick={props.delete}>Delete</button>\n        </>\n    )\n}\n\nexport default Person","import React from 'react'\n\nconst ContactForm = ({name, number, changeName, changeNumber, clickHandler}) => {\n    return(\n        <>\n        <form>\n            <div>\n            name: <input value={name} onChange={changeName}/>\n            <br/>\n            phone: <input value={number} onChange={changeNumber}/>\n            </div>\n            <div>\n            <button type=\"submit\" onClick={clickHandler}>add</button>\n            </div>\n        </form>\n        </>\n    )\n} \n\nexport default ContactForm","import React from 'react'\n\nconst Notification = ({message}) => {\n    return(\n        <div className=\"notification\">\n            <p>{message}</p>\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nconst Filter = ({searchTerm}) => {\nreturn(\n        <>\n        <p>Filter entries:</p> <input onChange={searchTerm}/>\n        </>\n    )\n}\n\nexport default Filter ","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Person from './components/Person'\nimport ContactForm from './components/ContactForm'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\n\nconst App = () => {\n  //useState functions and variables\n  const [ persons, setPersons ] = useState([]) \n  const [ filteredPersons, setFilteredPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ successMessage, setSuccessMessage ] = useState('')\n  \n  //Fetching persons from database with useEffect hook\n  useEffect(() => {    \n    personService\n      .getAll()\n      .then(response => {\n        const initialPersons = response\n        setPersons(initialPersons)\n        setFilteredPersons(initialPersons)\n      })\n  }, [])\n    \n/* Add person function */\n  const addPerson = event => {\n    event.preventDefault()\n    \n    //Creating a new entry \n    const createPerson = () => {\n      const personObject = {\n        name: newName,\n        number: newNumber,\n      }\n      //Sending new entry to phonebook database\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons([...persons, response])\n          setFilteredPersons([...persons, response])\n          setSuccessMessage(`Added ${personObject.name}`)\n          setTimeout(() => {\n            setSuccessMessage('')\n          }, 5000)\n        }) \n    }\n    \n    /* Comparing new entry to the ones in the phonebook */ \n    const upperCaseNewName = newName.toUpperCase()\n    let doubleName\n    persons.map(person => {\n      const upperCasePerson = person.name.toUpperCase()\n      if(upperCaseNewName === upperCasePerson) {\n        //If the person doesn't exist in the phonebook, add them to the doubleName variable\n        doubleName = upperCasePerson\n      }\n      return doubleName\n    })\n    \n    //If double name is undefined, create a new entry (didn't use !doubleName since I don't know what other values it might return)\n    if (doubleName === undefined) {\n      createPerson()\n    } else if(doubleName === upperCaseNewName) {\n      alert(`${newName} is already in the phonebook`)\n    }\n    /* */\n    \n    setNewName('')\n    setNewNumber('')\n  }\n  /* */\n  \n  /* Remove number function */\n  const removeNumber = event => {\n    const person = event.target.previousElementSibling\n    const id = person.id\n    if(window.confirm(`Delete ${person.innerHTML}?`)) {\n      personService\n        .deletePerson(id)\n        .then(() => {\n          personService\n          .getAll()\n          .then(response => {\n            const updatedPersons = response\n            setPersons(updatedPersons)\n            setFilteredPersons(updatedPersons)\n        })\n      })\n    }\n  }\n  /* */\n\n  const filterEntries = event => {\n      let filtered = persons.filter(person => {\n        return person.name.toUpperCase().indexOf(event.target.value.toUpperCase()) !== -1\n      })\n    setFilteredPersons(filtered)\n  }\n\n  const renderPersons = () => filteredPersons.map(person =>\n    <Person key={person.id} id={person.id} name={person.name} number={person.number} delete={(event) => removeNumber(event)}/>\n  )\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage}/>\n      <Filter searchTerm={(event) => filterEntries(event)}/>\n      <ContactForm \n        name={newName}\n        number={newNumber}\n        changeName={(event) => setNewName(event.target.value)} \n        changeNumber={(event) => setNewNumber(event.target.value)} \n        clickHandler={(event) => addPerson(event)}\n      />\n      <h2>Numbers</h2>\n      {renderPersons()}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}